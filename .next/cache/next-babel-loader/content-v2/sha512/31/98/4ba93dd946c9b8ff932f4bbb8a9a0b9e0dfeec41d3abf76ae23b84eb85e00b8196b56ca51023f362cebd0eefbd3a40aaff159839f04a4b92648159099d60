{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/shuhei/Examine/online-offline/components/Room.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport Router from 'next/router';\n\nclass Room extends Component {\n  constructor(props) {\n    super(props);\n    this.props.mediaConnection.on('stream', stream => {\n      // video要素にカメラ映像をセットして再生\n      console.error(\"STREAM RECEIVED!\");\n      const videoElm = document.getElementById('target-video');\n      videoElm.srcObject = stream;\n      videoElm.play();\n    });\n    this.initializeScreenShare();\n\n    if (this.props.iscalled) {\n      this.makeCall();\n    } else {\n      this.respondCall();\n    }\n\n    this.doReplace = this.doReplace.bind(this);\n  }\n\n  initializeScreenShare() {\n    navigator.mediaDevices.getDisplayMedia({\n      video: true\n    }).then(stream => {\n      //const videoElm = document.getElementById(\"my-video\");\n      //videoElm.srcObject = stream;\n      //videoElm.play();\n      this.setState({\n        localStream: stream\n      });\n      const videoElm = document.getElementById(\"my-video\");\n      videoElm.srcObject = stream;\n      videoElm.play();\n      this.props.mediaConnection.replaceStream(stream);\n    }).catch(error => {\n      console.log(\"mediaDevice.getDisplayMedia() error:\", error);\n      return;\n    });\n  }\n\n  makeCall() {\n    console.log(\"Make Call!\");\n  }\n\n  respondCall() {\n    console.log(\"Respond Call\");\n  }\n\n  doReplace(e) {\n    console.log(\"Replace done!\");\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"My screen\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n        id: \"my-video\",\n        width: \"400px\",\n        autoPlay: true,\n        muted: true,\n        playsInline: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Target screen\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n        id: \"target-video\",\n        width: \"400px\",\n        autoplay: true,\n        muted: true,\n        playsinline: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"replace-button\",\n        onClick: this.doReplace,\n        children: \"Replace\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nRoom = connect(state => state)(Room);\nexport default Room;","map":{"version":3,"sources":["/Users/shuhei/Examine/online-offline/components/Room.js"],"names":["React","Component","connect","Router","Room","constructor","props","mediaConnection","on","stream","console","error","videoElm","document","getElementById","srcObject","play","initializeScreenShare","iscalled","makeCall","respondCall","doReplace","bind","navigator","mediaDevices","getDisplayMedia","video","then","setState","localStream","replaceStream","catch","log","e","render","state"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,OAAOC,MAAP,MAAmB,aAAnB;;AAGA,MAAMC,IAAN,SAAmBH,SAAnB,CAA4B;AAExBI,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,SAAKA,KAAL,CAAWC,eAAX,CAA2BC,EAA3B,CAA8B,QAA9B,EAAwCC,MAAM,IAAI;AAC9C;AACAC,MAAAA,OAAO,CAACC,KAAR,CAAc,kBAAd;AACA,YAAMC,QAAQ,GAAGC,QAAQ,CAACC,cAAT,CAAwB,cAAxB,CAAjB;AACAF,MAAAA,QAAQ,CAACG,SAAT,GAAqBN,MAArB;AACAG,MAAAA,QAAQ,CAACI,IAAT;AACH,KAND;AAOA,SAAKC,qBAAL;;AACA,QAAG,KAAKX,KAAL,CAAWY,QAAd,EAAuB;AACnB,WAAKC,QAAL;AACH,KAFD,MAEK;AACD,WAAKC,WAAL;AACH;;AACD,SAAKC,SAAL,GAAiB,KAAKA,SAAL,CAAeC,IAAf,CAAoB,IAApB,CAAjB;AACH;;AAEDL,EAAAA,qBAAqB,GAAE;AACnBM,IAAAA,SAAS,CAACC,YAAV,CAAuBC,eAAvB,CAAuC;AAACC,MAAAA,KAAK,EAAE;AAAR,KAAvC,EACCC,IADD,CACOlB,MAAM,IAAI;AACb;AACA;AACA;AACA,WAAKmB,QAAL,CAAc;AACVC,QAAAA,WAAW,EAAEpB;AADH,OAAd;AAGA,YAAMG,QAAQ,GAAGC,QAAQ,CAACC,cAAT,CAAwB,UAAxB,CAAjB;AACAF,MAAAA,QAAQ,CAACG,SAAT,GAAqBN,MAArB;AACAG,MAAAA,QAAQ,CAACI,IAAT;AACA,WAAKV,KAAL,CAAWC,eAAX,CAA2BuB,aAA3B,CAAyCrB,MAAzC;AACH,KAZD,EAYGsB,KAZH,CAYUpB,KAAK,IAAG;AACdD,MAAAA,OAAO,CAACsB,GAAR,CAAY,sCAAZ,EAAoDrB,KAApD;AACA;AACH,KAfD;AAgBH;;AAEDQ,EAAAA,QAAQ,GAAE;AACNT,IAAAA,OAAO,CAACsB,GAAR,CAAY,YAAZ;AACH;;AAEDZ,EAAAA,WAAW,GAAE;AACTV,IAAAA,OAAO,CAACsB,GAAR,CAAY,cAAZ;AACH;;AAEDX,EAAAA,SAAS,CAACY,CAAD,EAAG;AACRvB,IAAAA,OAAO,CAACsB,GAAR,CAAY,eAAZ;AACH;;AAEDE,EAAAA,MAAM,GAAE;AACJ,wBACI;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAO,QAAA,EAAE,EAAC,UAAV;AAAqB,QAAA,KAAK,EAAC,OAA3B;AAAmC,QAAA,QAAQ,MAA3C;AAA4C,QAAA,KAAK,MAAjD;AAAkD,QAAA,WAAW;AAA7D;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ,eAII;AAAO,QAAA,EAAE,EAAC,cAAV;AAAyB,QAAA,KAAK,EAAC,OAA/B;AAAuC,QAAA,QAAQ,MAA/C;AAAgD,QAAA,KAAK,MAArD;AAAsD,QAAA,WAAW;AAAjE;AAAA;AAAA;AAAA;AAAA,cAJJ,eAKI;AAAQ,QAAA,EAAE,EAAC,gBAAX;AAA4B,QAAA,OAAO,EAAE,KAAKb,SAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AASH;;AA7DuB;;AAgE5BjB,IAAI,GAAGF,OAAO,CAAEiC,KAAD,IAASA,KAAV,CAAP,CAAwB/B,IAAxB,CAAP;AACA,eAAeA,IAAf","sourcesContent":["import React, {Component} from \"react\";\nimport {connect} from \"react-redux\";\nimport Router from 'next/router';\n\n\nclass Room extends Component{\n\n    constructor(props){\n        super(props);\n        this.props.mediaConnection.on('stream', stream => {\n            // video要素にカメラ映像をセットして再生\n            console.error(\"STREAM RECEIVED!\");\n            const videoElm = document.getElementById('target-video');\n            videoElm.srcObject = stream;\n            videoElm.play();\n        });\n        this.initializeScreenShare();\n        if(this.props.iscalled){\n            this.makeCall();\n        }else{\n            this.respondCall();\n        }\n        this.doReplace = this.doReplace.bind(this);\n    }\n\n    initializeScreenShare(){\n        navigator.mediaDevices.getDisplayMedia({video: true})\n        .then( stream => {\n            //const videoElm = document.getElementById(\"my-video\");\n            //videoElm.srcObject = stream;\n            //videoElm.play();\n            this.setState({\n                localStream: stream,\n            });\n            const videoElm = document.getElementById(\"my-video\");\n            videoElm.srcObject = stream;\n            videoElm.play();\n            this.props.mediaConnection.replaceStream(stream);\n        }).catch( error =>{\n            console.log(\"mediaDevice.getDisplayMedia() error:\", error);\n            return;\n        })\n    }\n\n    makeCall(){\n        console.log(\"Make Call!\");\n    }\n\n    respondCall(){\n        console.log(\"Respond Call\");\n    }\n\n    doReplace(e){\n        console.log(\"Replace done!\");\n    }\n\n    render(){\n        return (\n            <div>\n                <p>My screen</p>\n                <video id=\"my-video\" width=\"400px\" autoPlay muted playsInline></video>\n                <p>Target screen</p>\n                <video id=\"target-video\" width=\"400px\" autoplay muted playsinline></video>\n                <button id=\"replace-button\" onClick={this.doReplace}>Replace</button>\n            </div>\n        );\n    }\n}\n\nRoom = connect((state)=>state)(Room);\nexport default Room;"]},"metadata":{},"sourceType":"module"}