{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _classCallCheck from \"/Users/shuhei/Examine/online-offline/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuhei/Examine/online-offline/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/shuhei/Examine/online-offline/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/shuhei/Examine/online-offline/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/shuhei/Examine/online-offline/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/shuhei/Examine/online-offline/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"/Users/shuhei/Examine/online-offline/components/Room.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport Router from 'next/router';\n\nvar Room = /*#__PURE__*/function (_Component) {\n  _inherits(Room, _Component);\n\n  var _super = _createSuper(Room);\n\n  function Room(props) {\n    var _this;\n\n    _classCallCheck(this, Room);\n\n    _this = _super.call(this, props);\n\n    _this.props.mediaConnection.on('stream', function (stream) {\n      // video要素にカメラ映像をセットして再生\n      console.error(\"STREAM RECEIVED!\");\n      var videoElm = document.getElementById('target-video');\n      videoElm.srcObject = stream;\n      videoElm.play();\n    });\n\n    _this.initializeScreenShare();\n\n    if (_this.props.iscalled) {\n      _this.makeCall();\n    } else {\n      _this.respondCall();\n    }\n\n    _this.doReplace = _this.doReplace.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Room, [{\n    key: \"initializeScreenShare\",\n    value: function initializeScreenShare() {\n      var _this2 = this;\n\n      navigator.mediaDevices.getDisplayMedia({\n        video: true\n      }).then(function (stream) {\n        //const videoElm = document.getElementById(\"my-video\");\n        //videoElm.srcObject = stream;\n        //videoElm.play();\n        _this2.setState({\n          localStream: stream\n        });\n\n        var videoElm = document.getElementById(\"my-video\");\n        videoElm.srcObject = stream;\n        videoElm.play();\n\n        _this2.props.mediaConnection.replaceStream(stream);\n      })[\"catch\"](function (error) {\n        console.log(\"mediaDevice.getDisplayMedia() error:\", error);\n        return;\n      });\n    }\n  }, {\n    key: \"makeCall\",\n    value: function makeCall() {\n      console.log(\"Make Call!\");\n    }\n  }, {\n    key: \"respondCall\",\n    value: function respondCall() {\n      console.log(\"Respond Call\");\n    }\n  }, {\n    key: \"doReplace\",\n    value: function doReplace(e) {\n      console.log(\"Replace done!\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"My screen\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n          id: \"my-video\",\n          width: \"400px\",\n          autoplay: true,\n          muted: true,\n          playsinline: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Target screen\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n          id: \"target-video\",\n          width: \"400px\",\n          autoplay: true,\n          muted: true,\n          playsinline: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"replace-button\",\n          onClick: this.doReplace,\n          children: \"Replace\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this);\n    }\n  }]);\n\n  return Room;\n}(Component);\n\nRoom = connect(function (state) {\n  return state;\n})(Room);\nexport default Room;","map":{"version":3,"sources":["/Users/shuhei/Examine/online-offline/components/Room.js"],"names":["React","Component","connect","Router","Room","props","mediaConnection","on","stream","console","error","videoElm","document","getElementById","srcObject","play","initializeScreenShare","iscalled","makeCall","respondCall","doReplace","bind","navigator","mediaDevices","getDisplayMedia","video","then","setState","localStream","replaceStream","log","e","state"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,OAAOC,MAAP,MAAmB,aAAnB;;IAGMC,I;;;;;AAEF,gBAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AACd,8BAAMA,KAAN;;AACA,UAAKA,KAAL,CAAWC,eAAX,CAA2BC,EAA3B,CAA8B,QAA9B,EAAwC,UAAAC,MAAM,EAAI;AAC9C;AACAC,MAAAA,OAAO,CAACC,KAAR,CAAc,kBAAd;AACA,UAAMC,QAAQ,GAAGC,QAAQ,CAACC,cAAT,CAAwB,cAAxB,CAAjB;AACAF,MAAAA,QAAQ,CAACG,SAAT,GAAqBN,MAArB;AACAG,MAAAA,QAAQ,CAACI,IAAT;AACH,KAND;;AAOA,UAAKC,qBAAL;;AACA,QAAG,MAAKX,KAAL,CAAWY,QAAd,EAAuB;AACnB,YAAKC,QAAL;AACH,KAFD,MAEK;AACD,YAAKC,WAAL;AACH;;AACD,UAAKC,SAAL,GAAiB,MAAKA,SAAL,CAAeC,IAAf,+BAAjB;AAfc;AAgBjB;;;;4CAEsB;AAAA;;AACnBC,MAAAA,SAAS,CAACC,YAAV,CAAuBC,eAAvB,CAAuC;AAACC,QAAAA,KAAK,EAAE;AAAR,OAAvC,EACCC,IADD,CACO,UAAAlB,MAAM,EAAI;AACb;AACA;AACA;AACA,QAAA,MAAI,CAACmB,QAAL,CAAc;AACVC,UAAAA,WAAW,EAAEpB;AADH,SAAd;;AAGA,YAAMG,QAAQ,GAAGC,QAAQ,CAACC,cAAT,CAAwB,UAAxB,CAAjB;AACAF,QAAAA,QAAQ,CAACG,SAAT,GAAqBN,MAArB;AACAG,QAAAA,QAAQ,CAACI,IAAT;;AACA,QAAA,MAAI,CAACV,KAAL,CAAWC,eAAX,CAA2BuB,aAA3B,CAAyCrB,MAAzC;AACH,OAZD,WAYU,UAAAE,KAAK,EAAG;AACdD,QAAAA,OAAO,CAACqB,GAAR,CAAY,sCAAZ,EAAoDpB,KAApD;AACA;AACH,OAfD;AAgBH;;;+BAES;AACND,MAAAA,OAAO,CAACqB,GAAR,CAAY,YAAZ;AACH;;;kCAEY;AACTrB,MAAAA,OAAO,CAACqB,GAAR,CAAY,cAAZ;AACH;;;8BAESC,C,EAAE;AACRtB,MAAAA,OAAO,CAACqB,GAAR,CAAY,eAAZ;AACH;;;6BAEO;AACJ,0BACI;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAO,UAAA,EAAE,EAAC,UAAV;AAAqB,UAAA,KAAK,EAAC,OAA3B;AAAmC,UAAA,QAAQ,MAA3C;AAA4C,UAAA,KAAK,MAAjD;AAAkD,UAAA,WAAW;AAA7D;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAII;AAAO,UAAA,EAAE,EAAC,cAAV;AAAyB,UAAA,KAAK,EAAC,OAA/B;AAAuC,UAAA,QAAQ,MAA/C;AAAgD,UAAA,KAAK,MAArD;AAAsD,UAAA,WAAW;AAAjE;AAAA;AAAA;AAAA;AAAA,gBAJJ,eAKI;AAAQ,UAAA,EAAE,EAAC,gBAAX;AAA4B,UAAA,OAAO,EAAE,KAAKV,SAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AASH;;;;EA7DcnB,S;;AAgEnBG,IAAI,GAAGF,OAAO,CAAC,UAAC8B,KAAD;AAAA,SAASA,KAAT;AAAA,CAAD,CAAP,CAAwB5B,IAAxB,CAAP;AACA,eAAeA,IAAf","sourcesContent":["import React, {Component} from \"react\";\nimport {connect} from \"react-redux\";\nimport Router from 'next/router';\n\n\nclass Room extends Component{\n\n    constructor(props){\n        super(props);\n        this.props.mediaConnection.on('stream', stream => {\n            // video要素にカメラ映像をセットして再生\n            console.error(\"STREAM RECEIVED!\");\n            const videoElm = document.getElementById('target-video');\n            videoElm.srcObject = stream;\n            videoElm.play();\n        });\n        this.initializeScreenShare();\n        if(this.props.iscalled){\n            this.makeCall();\n        }else{\n            this.respondCall();\n        }\n        this.doReplace = this.doReplace.bind(this);\n    }\n\n    initializeScreenShare(){\n        navigator.mediaDevices.getDisplayMedia({video: true})\n        .then( stream => {\n            //const videoElm = document.getElementById(\"my-video\");\n            //videoElm.srcObject = stream;\n            //videoElm.play();\n            this.setState({\n                localStream: stream,\n            });\n            const videoElm = document.getElementById(\"my-video\");\n            videoElm.srcObject = stream;\n            videoElm.play();\n            this.props.mediaConnection.replaceStream(stream);\n        }).catch( error =>{\n            console.log(\"mediaDevice.getDisplayMedia() error:\", error);\n            return;\n        })\n    }\n\n    makeCall(){\n        console.log(\"Make Call!\");\n    }\n\n    respondCall(){\n        console.log(\"Respond Call\");\n    }\n\n    doReplace(e){\n        console.log(\"Replace done!\");\n    }\n\n    render(){\n        return (\n            <div>\n                <p>My screen</p>\n                <video id=\"my-video\" width=\"400px\" autoplay muted playsinline></video>\n                <p>Target screen</p>\n                <video id=\"target-video\" width=\"400px\" autoplay muted playsinline></video>\n                <button id=\"replace-button\" onClick={this.doReplace}>Replace</button>\n            </div>\n        );\n    }\n}\n\nRoom = connect((state)=>state)(Room);\nexport default Room;"]},"metadata":{},"sourceType":"module"}